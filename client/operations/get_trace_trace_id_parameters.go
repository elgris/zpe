// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetTraceTraceIDParams creates a new GetTraceTraceIDParams object
// with the default values initialized.
func NewGetTraceTraceIDParams() *GetTraceTraceIDParams {
	var ()
	return &GetTraceTraceIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetTraceTraceIDParamsWithTimeout creates a new GetTraceTraceIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetTraceTraceIDParamsWithTimeout(timeout time.Duration) *GetTraceTraceIDParams {
	var ()
	return &GetTraceTraceIDParams{

		timeout: timeout,
	}
}

// NewGetTraceTraceIDParamsWithContext creates a new GetTraceTraceIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetTraceTraceIDParamsWithContext(ctx context.Context) *GetTraceTraceIDParams {
	var ()
	return &GetTraceTraceIDParams{

		Context: ctx,
	}
}

// NewGetTraceTraceIDParamsWithHTTPClient creates a new GetTraceTraceIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetTraceTraceIDParamsWithHTTPClient(client *http.Client) *GetTraceTraceIDParams {
	var ()
	return &GetTraceTraceIDParams{
		HTTPClient: client,
	}
}

/*GetTraceTraceIDParams contains all the parameters to send to the API endpoint
for the get trace trace ID operation typically these are written to a http.Request
*/
type GetTraceTraceIDParams struct {

	/*TraceID
	  Trace identifier, set on all spans within it.

	Encoded as 16 or 32 lowercase hex characters corresponding to 64 or 128 bits.
	For example, a 128bit trace ID looks like 4e441824ec2b6a44ffdc9bb9a6453df3


	*/
	TraceID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get trace trace ID params
func (o *GetTraceTraceIDParams) WithTimeout(timeout time.Duration) *GetTraceTraceIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get trace trace ID params
func (o *GetTraceTraceIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get trace trace ID params
func (o *GetTraceTraceIDParams) WithContext(ctx context.Context) *GetTraceTraceIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get trace trace ID params
func (o *GetTraceTraceIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get trace trace ID params
func (o *GetTraceTraceIDParams) WithHTTPClient(client *http.Client) *GetTraceTraceIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get trace trace ID params
func (o *GetTraceTraceIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithTraceID adds the traceID to the get trace trace ID params
func (o *GetTraceTraceIDParams) WithTraceID(traceID string) *GetTraceTraceIDParams {
	o.SetTraceID(traceID)
	return o
}

// SetTraceID adds the traceId to the get trace trace ID params
func (o *GetTraceTraceIDParams) SetTraceID(traceID string) {
	o.TraceID = traceID
}

// WriteToRequest writes these params to a swagger request
func (o *GetTraceTraceIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param traceId
	if err := r.SetPathParam("traceId", o.TraceID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
