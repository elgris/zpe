// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetTracesParams creates a new GetTracesParams object
// with the default values initialized.
func NewGetTracesParams() *GetTracesParams {
	var (
		limitDefault = int64(10)
	)
	return &GetTracesParams{
		Limit: &limitDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetTracesParamsWithTimeout creates a new GetTracesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetTracesParamsWithTimeout(timeout time.Duration) *GetTracesParams {
	var (
		limitDefault = int64(10)
	)
	return &GetTracesParams{
		Limit: &limitDefault,

		timeout: timeout,
	}
}

// NewGetTracesParamsWithContext creates a new GetTracesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetTracesParamsWithContext(ctx context.Context) *GetTracesParams {
	var (
		limitDefault = int64(10)
	)
	return &GetTracesParams{
		Limit: &limitDefault,

		Context: ctx,
	}
}

// NewGetTracesParamsWithHTTPClient creates a new GetTracesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetTracesParamsWithHTTPClient(client *http.Client) *GetTracesParams {
	var (
		limitDefault = int64(10)
	)
	return &GetTracesParams{
		Limit:      &limitDefault,
		HTTPClient: client,
	}
}

/*GetTracesParams contains all the parameters to send to the API endpoint
for the get traces operation typically these are written to a http.Request
*/
type GetTracesParams struct {

	/*AnnotationQuery
	  Ex. `http.uri=/foo and retried` - If key/value (has an `=`),
	constrains against Span.tags entres. If just a word, constrains
	against Span.annotations[].value or Span.tags[].key. Any values are
	AND against eachother. This means a span in the trace must match
	all of these.


	*/
	AnnotationQuery *string
	/*EndTs
	  Only return traces where all Span.timestamp are at or before this
	time in epoch milliseconds. Defaults to current time.


	*/
	EndTs *int64
	/*Limit
	  Maximum number of traces to return. Defaults to 10


	*/
	Limit *int64
	/*Lookback
	  Only return traces where all  Span.timestamp are at or after (endTs
	- * lookback) in milliseconds. Defaults to endTs, limited to a
	system parameter QUERY_LOOKBACK


	*/
	Lookback *int64
	/*MaxDuration
	  Only return traces whose Span.duration is less than or equal to
	`maxDuration` microseconds. Only valid with minDuration.


	*/
	MaxDuration *int64
	/*MinDuration
	  Ex. 100000 (for 100ms). Only return traces whose `Span.duration` is
	greater than or equal to minDuration microseconds.


	*/
	MinDuration *int64
	/*ServiceName
	  Ex favstar (required) - Lower-case label of a node in the service
	graph. The /services endpoint enumerates possible input values.


	*/
	ServiceName *string
	/*SpanName
	  Ex get - name of a span in a trace.
	Only return traces that contains spans with this name.


	*/
	SpanName *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get traces params
func (o *GetTracesParams) WithTimeout(timeout time.Duration) *GetTracesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get traces params
func (o *GetTracesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get traces params
func (o *GetTracesParams) WithContext(ctx context.Context) *GetTracesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get traces params
func (o *GetTracesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get traces params
func (o *GetTracesParams) WithHTTPClient(client *http.Client) *GetTracesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get traces params
func (o *GetTracesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAnnotationQuery adds the annotationQuery to the get traces params
func (o *GetTracesParams) WithAnnotationQuery(annotationQuery *string) *GetTracesParams {
	o.SetAnnotationQuery(annotationQuery)
	return o
}

// SetAnnotationQuery adds the annotationQuery to the get traces params
func (o *GetTracesParams) SetAnnotationQuery(annotationQuery *string) {
	o.AnnotationQuery = annotationQuery
}

// WithEndTs adds the endTs to the get traces params
func (o *GetTracesParams) WithEndTs(endTs *int64) *GetTracesParams {
	o.SetEndTs(endTs)
	return o
}

// SetEndTs adds the endTs to the get traces params
func (o *GetTracesParams) SetEndTs(endTs *int64) {
	o.EndTs = endTs
}

// WithLimit adds the limit to the get traces params
func (o *GetTracesParams) WithLimit(limit *int64) *GetTracesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get traces params
func (o *GetTracesParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithLookback adds the lookback to the get traces params
func (o *GetTracesParams) WithLookback(lookback *int64) *GetTracesParams {
	o.SetLookback(lookback)
	return o
}

// SetLookback adds the lookback to the get traces params
func (o *GetTracesParams) SetLookback(lookback *int64) {
	o.Lookback = lookback
}

// WithMaxDuration adds the maxDuration to the get traces params
func (o *GetTracesParams) WithMaxDuration(maxDuration *int64) *GetTracesParams {
	o.SetMaxDuration(maxDuration)
	return o
}

// SetMaxDuration adds the maxDuration to the get traces params
func (o *GetTracesParams) SetMaxDuration(maxDuration *int64) {
	o.MaxDuration = maxDuration
}

// WithMinDuration adds the minDuration to the get traces params
func (o *GetTracesParams) WithMinDuration(minDuration *int64) *GetTracesParams {
	o.SetMinDuration(minDuration)
	return o
}

// SetMinDuration adds the minDuration to the get traces params
func (o *GetTracesParams) SetMinDuration(minDuration *int64) {
	o.MinDuration = minDuration
}

// WithServiceName adds the serviceName to the get traces params
func (o *GetTracesParams) WithServiceName(serviceName *string) *GetTracesParams {
	o.SetServiceName(serviceName)
	return o
}

// SetServiceName adds the serviceName to the get traces params
func (o *GetTracesParams) SetServiceName(serviceName *string) {
	o.ServiceName = serviceName
}

// WithSpanName adds the spanName to the get traces params
func (o *GetTracesParams) WithSpanName(spanName *string) *GetTracesParams {
	o.SetSpanName(spanName)
	return o
}

// SetSpanName adds the spanName to the get traces params
func (o *GetTracesParams) SetSpanName(spanName *string) {
	o.SpanName = spanName
}

// WriteToRequest writes these params to a swagger request
func (o *GetTracesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AnnotationQuery != nil {

		// query param annotationQuery
		var qrAnnotationQuery string
		if o.AnnotationQuery != nil {
			qrAnnotationQuery = *o.AnnotationQuery
		}
		qAnnotationQuery := qrAnnotationQuery
		if qAnnotationQuery != "" {
			if err := r.SetQueryParam("annotationQuery", qAnnotationQuery); err != nil {
				return err
			}
		}

	}

	if o.EndTs != nil {

		// query param endTs
		var qrEndTs int64
		if o.EndTs != nil {
			qrEndTs = *o.EndTs
		}
		qEndTs := swag.FormatInt64(qrEndTs)
		if qEndTs != "" {
			if err := r.SetQueryParam("endTs", qEndTs); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Lookback != nil {

		// query param lookback
		var qrLookback int64
		if o.Lookback != nil {
			qrLookback = *o.Lookback
		}
		qLookback := swag.FormatInt64(qrLookback)
		if qLookback != "" {
			if err := r.SetQueryParam("lookback", qLookback); err != nil {
				return err
			}
		}

	}

	if o.MaxDuration != nil {

		// query param maxDuration
		var qrMaxDuration int64
		if o.MaxDuration != nil {
			qrMaxDuration = *o.MaxDuration
		}
		qMaxDuration := swag.FormatInt64(qrMaxDuration)
		if qMaxDuration != "" {
			if err := r.SetQueryParam("maxDuration", qMaxDuration); err != nil {
				return err
			}
		}

	}

	if o.MinDuration != nil {

		// query param minDuration
		var qrMinDuration int64
		if o.MinDuration != nil {
			qrMinDuration = *o.MinDuration
		}
		qMinDuration := swag.FormatInt64(qrMinDuration)
		if qMinDuration != "" {
			if err := r.SetQueryParam("minDuration", qMinDuration); err != nil {
				return err
			}
		}

	}

	if o.ServiceName != nil {

		// query param serviceName
		var qrServiceName string
		if o.ServiceName != nil {
			qrServiceName = *o.ServiceName
		}
		qServiceName := qrServiceName
		if qServiceName != "" {
			if err := r.SetQueryParam("serviceName", qServiceName); err != nil {
				return err
			}
		}

	}

	if o.SpanName != nil {

		// query param spanName
		var qrSpanName string
		if o.SpanName != nil {
			qrSpanName = *o.SpanName
		}
		qSpanName := qrSpanName
		if qSpanName != "" {
			if err := r.SetQueryParam("spanName", qSpanName); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
